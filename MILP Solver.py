#Importing Libraries
import numpy as np
import pandas as pd
import pyomo.environ as pyo
from pyomo.environ import *
from pyomo.opt import SolverFactory
import seaborn as sns
import matplotlib.pyplot as plt
from itertools import cycle, islice
import random

#Reading the consumption, PV, and Wind data
data = pd.read_csv("Dataset.csv").drop('Unnamed: 0', axis=1)

#Defining the gas and electricity price
buy_price = 24*[0]
buy_price[0:7] = 7*[3.99]
buy_price[22] = 3.99
buy_price[23] = 3.99
buy_price[11:19] = 8*[19.99]
buy_price[7:11] = 4*[11.99]
buy_price[19:22] = 3*[11.99]

sell_price = [i/2 for i in buy_price]

gas_price = 3.21

#Defining AA-CAES functions:
P_CAES_ch_max = 800
P_CAES_dch_max = 800
gamma = 1.4
cp = 1.005
T_amb = 298
T_tank = 298
V_tank = 1100.19

#Discharge Mass Flow Rate Linear Model
def discharging_mfr(P_discharge):
    term2 = 0.00278671 * P_discharge + 1.2292957997285587
    
    return term2

#Discharge Cooling Load Linear Model
def cooling_load_predicted(P_discharge,t_amb):
    term1 = 0.39792147*P_discharge + 432.3243866973607
    term2 = 0.00278671 * P_discharge + 1.2292957997285587
    cooling_load = term1 - term2 *t_amb
    
    return -1 *cooling_load

#Charging Mass Flow Rate Linear Model
def charging_mfr(P_discharge):
    term2 = 0.0017455 * P_discharge -0.11658996400
    
    return term2

#Updating the air storage pressure
def new_pressure(P_charge,P_discharge,P_tank,bin_charge,bin_discharge):
    timestep = 3600
    old_density = P_tank * 100000 / (287 * T_tank)
    new_density = (old_density * V_tank + (charging_mfr(P_charge)*bin_charge-
                                           discharging_mfr(P_discharge)*bin_discharge)*timestep)/V_tank
    
    new_pressure = new_density * (T_tank)*287 /100000   
    
    return new_pressure

#Defining empty lists and dataframes for optimal policy:
df_optimal = pd.DataFrame()
picked_days = []
operation_costs = []

#Defining Training and Test Days:
test_days = np.arange(5,366,5)
all_days = np.arange(1,366,1)
training_days = [i for i in all_days if i not in test_days]

#Running the Model For Training Days:
for a in training_days:
    
    #Reading Data For Day (a):
    t = 24
    e_load = data[data["Day"] == a]["Electricity"].values
    h_load = data[data["Day"] == a]["Heating"].values
    c_load = data[data["Day"] == a]["Cooling"].values
    wind_data = data[data["Day"] == a]["WT_power"].values
    PV_data = data[data["Day"] == a]["PV power"].values
    temp = data[data["Day"] == a]["Temperature"].values
    
    # Energy Hub Equipment
    t= range(24)
    t2 = range(25)
    
    #Micro Turbine:
    P_mt_max = 1500      # Maximum Electricity Power Generated by Micro Turbine
    P_mt_min = 200       # Minimum Electricity Power Generated by Micro Turbine
    n_mt = 0.35          # Electrical Efficiency of Micro Turbine
    n_hru = 0.42         # Efficiency of Heat Recovery Unit
    H_hru_max =P_mt_max*(n_hru/n_mt)
    H_hru_min =P_mt_min*(n_hru/n_mt)
    gas_max = 10000
    gas_min = 0
    
    # Gas Boiler
    H_gb_min = 0         # Minimum Heating Power Generated by Gas Boiler
    H_gb_max = 1500      # Maximum Heating Power Generated by Gas Boiler
    n_gb = 0.8           # Efficiency of Gas Boiler
    
    #Grid System
    P_grid_min = 0       # Minimum Electricity Imported/Exported from Grid System
    P_grid_max = 2000    # Maximum Electricity Imported/Exported from Grid System

    #Absorption Chiller
    H_ac_max = 1000/0.9  # Maximum Heating Power Consumed by Absorption Chiller
    H_ac_min = 0         # Minimum Heating Power Consumed by Absorption Chiller
    n_ac = 0.9           # Efficiency of Absorption Chiller
    
    #Electric Chiller
    C_ec_max = 1500      # Maximum Cooling Power Generated by Electric Chiller 
    C_ec_min = 0         # Minimum Cooling Power Generated by Electric Chiller 
    COP_ec = 3           # COP of electric chiller
    
    #Heat Pump: 
    H_hp_max = 3000      # Maximum Heating Power Generated by Heat Pump
    C_hp_max = 3000      # Maximum Cooling Power Generated by Heat Pump
    H_hp_min = 0         # Minimum Heating Power Generated by Heat Pump
    C_hp_min = 0         # Minimum Cooling Power Generated by Heat Pump
    COP_hp   = 3         # COP of Heat Pump
    
    #AA-CAES
    P_CAES_ch_max = 800      # Maximum Charging Power of AA-CAES
    P_CAES_ch_min = 80       # Minimum Charging Power of AA-CAES
    
    P_CAES_dch_max = 800     # Maximum Discharging Power of AA-CAES
    P_CAES_dch_min = 80      # Minimum Discharging Power of AA-CAES
    
    #Decision Variables:
    model = pyo.ConcreteModel()
    model.time = pyo.Set(initialize=(i for i in t))
    model.timestep = pyo.Param(model.time,initialize=3600)
    model.time_soc = pyo.Set(initialize=(i for i in t2))
    
    #Micro Turbine
    model.P_gt = pyo.Var(model.time,bounds=(0,P_gt_max))
    model.bin_P_gt = pyo.Var(model.time, bounds=(0,1), domain=Binary)
    model.H_hru = pyo.Var(model.time, bounds= (0,H_hru_max))
    
    #Grid System
    model.P_grid_buy = pyo.Var(model.time, bounds= (P_grid_min,P_grid_max))
    model.P_grid_sell = pyo.Var(model.time, bounds= (P_grid_min,P_grid_max))
    model.bin_grid_buy = pyo.Var(model.time, bounds=(0,1),domain=Binary)
    model.bin_grid_sell = pyo.Var(model.time, bounds=(0,1),domain=Binary)

    #AA-CAES System
    model.P_CAES_ch = pyo.Var(model.time,bounds = (0,P_CAES_ch_max))
    model.P_CAES_dch = pyo.Var(model.time,bounds = (0,P_CAES_dch_max))
    model.Pressure_CAES = pyo.Var(model.time_soc, bounds=(45,69))
    model.bin_CAES_ch = pyo.Var(model.time, bounds=(0,1), domain=Binary)
    model.bin_CAES_dch = pyo.Var(model.time, bounds=(0,1), domain=Binary)
    model.heat_caes = pyo.Var(model.time,bounds = (0,P_CAES_ch_max))
    model.cold_caes = pyo.Var(model.time,bounds = (0,P_CAES_ch_max))
    model.maximum_cold_caes = pyo.Var(model.time,bounds = (0,P_CAES_ch_max))
    model.maximum_heat_caes = pyo.Var(model.time,bounds = (0,P_CAES_ch_max))

    #Gas Boiler
    model.H_gb = pyo.Var(model.time,bounds = (H_gb_min,H_gb_max))

    #Absorption Chiller
    model.H_ac = pyo.Var(model.time,bounds = (H_ac_min,H_ac_max))
    model.C_ac = pyo.Var(model.time,bounds = (n_ac*H_ac_min,n_ac*H_ac_max))
    
    #Heat Pump
    model.H_hp = pyo.Var(model.time,bounds = (H_hp_min,H_hp_max))
    model.P_hp_H = pyo.Var(model.time,bounds = (H_hp_min/COP_hp,H_hp_max/COP_hp))
    model.P_hp_C = pyo.Var(model.time,bounds = (C_hp_min/COP_hp,C_hp_max/COP_hp))
    model.C_hp = pyo.Var(model.time,bounds = (C_hp_min,C_hp_max))
    model.bin_HP_H = pyo.Var(model.time, bounds=(0,1), domain=Binary)
    model.bin_HP_C = pyo.Var(model.time, bounds=(0,1), domain=Binary)

    #Re-assiging for simplification
    bin_P_mt=model.bin_P_mt

    P_hp_H = model.P_hp_H
    P_hp_C = model.P_hp_C
    H_hp = model.H_hp
    C_hp = model.C_hp
    bin_HP_H = model.bin_HP_H
    bin_HP_C =model.bin_HP_C

    C_ac = model.C_ac
    H_hru = model.H_hru
    timestep = model.timestep
    P_mt = model.P_mt 
    P_grid_buy = model.P_grid_buy 
    P_grid_sell = model.P_grid_sell
    H_gb = model.H_gb 
    H_ac = model.H_ac 

    bin_grid_buy = model.bin_grid_buy
    bin_grid_sell = model.bin_grid_sell


    P_CAES_ch =model.P_CAES_ch
    P_CAES_dch=model.P_CAES_dch
    Pressure_CAES=model.Pressure_CAES
    bin_CAES_ch=model.bin_CAES_ch
    bin_CAES_dch=model.bin_CAES_dch
    cold_caes = model.cold_caes
    heat_caes = model.heat_caes
   
    #Constraints:
    
    #AA-CAES:
    def CAES_charge_lower(model,i):
        return model.bin_CAES_ch[i]*P_CAES_ch_min <= model.P_CAES_ch[i]
    model.CAES_charge_limit_lower = Constraint(model.time, rule=CAES_charge_lower)

    def CAES_charge_upper(model,i):
        return model.P_CAES_ch[i] <= model.bin_CAES_ch[i]*P_CAES_ch_max
    model.CAES_charge_limit_upper = Constraint(model.time, rule=CAES_charge_upper)

    def CAES_discharge_lower(model,i):
        return model.bin_CAES_dch[i]*P_CAES_dch_min <= model.P_CAES_dch[i]
    model.CAES_discharge_limit_lower = Constraint(model.time, rule=CAES_discharge_lower)

    def CAES_discharge_upper(model,i):
        return model.P_CAES_dch[i] <= model.bin_CAES_dch[i]*P_CAES_dch_max
    model.CAES_discharge_limit_upper = Constraint(model.time, rule=CAES_discharge_upper)

    def CAES_operation_mode(model,i):
        return bin_CAES_ch[i]+bin_CAES_dch[i]<=1
    model.CAES_operation_mode_limit = Constraint(model.time, rule=CAES_operation_mode)

    def SOC_initial(model):
        return Pressure_CAES[0] == 57
    model.Pressure_CAES_initial = Constraint(rule= SOC_initial)

    def SOC_final(model):
        return Pressure_CAES[24] == Pressure_CAES[0]
    model.Pressure_CAES_final = Constraint(rule= SOC_final)


    model.Pressure_CAES_new = pyo.ConstraintList()
    for i in range(24):
        model.Pressure_CAES_new.add(expr = Pressure_CAES[i+1] ==
                                    new_pressure(P_CAES_ch[i],P_CAES_dch[i],Pressure_CAES[i],bin_CAES_ch[i],bin_CAES_dch[i]))

    def CAES_heat_mode(model,i):
        return heat_caes[i] <= P_CAES_ch[i]*bin_CAES_ch[i]*0.38
    model.CAES_heat_mode = Constraint(model.time, rule=CAES_heat_mode)

    def CAES_cold_mode(model,i):
        return cold_caes[i] <= cooling_load_predicted(P_CAES_dch[i],temp[i] + 273)*model.bin_CAES_dch[i]
    model.CAES_cold_mode = Constraint(model.time, rule=CAES_cold_mode)

    def CAES_maximum_heat_caes(model,i):
        return model.maximum_heat_caes[i] == P_CAES_ch[i]*bin_CAES_ch[i]*0.38
    model.CAES_maximum_heat_caes = Constraint(model.time, rule=CAES_maximum_heat_caes) 
    

    def CAES_maximum_cold_caes(model,i):
        return model.maximum_cold_caes[i] == cooling_load_predicted(P_CAES_dch[i],temp[i] + 273)*model.bin_CAES_dch[i]
    model.CAES_maximum_cold_caes = Constraint(model.time, rule=CAES_maximum_cold_caes) 
    
    
    #Grid Constraints
    def Grid_buy_limit(model,i):
        return P_grid_buy[i]<= bin_grid_buy[i]*P_grid_max
    model.Grid_buy_limit = Constraint(model.time, rule=Grid_buy_limit)

    def Grid_sell_limit(model,i):
        return P_grid_sell[i]<= bin_grid_sell[i]*P_grid_max
    model.Grid_sell_limit = Constraint(model.time, rule=Grid_sell_limit)

    def Grid_exchange_mode(model,i):
        return bin_grid_sell[i]+bin_grid_buy[i]<=1
    model.Grid_exchange_mode_limit = Constraint(model.time, rule=Grid_exchange_mode)

    #Gas Network Constraints:
    def gas_max_use(model,i):
        return (P_mt[i] /(n_mt) + H_gb[i]/n_gb)<=gas_max
    model.gas_max_use = Constraint(model.time, rule=gas_max_use)

    def gas_min_use(model,i):
        return (P_mt[i] /(n_mt) + H_gb[i]/n_gb)>=gas_min
    model.gas_min_use = Constraint(model.time, rule=gas_min_use)


    #Heat Recovery Unit Constraints:
    def HRU_convert(model,i):
        return H_hru[i] == P_mt[i]*(n_hru/n_mt)
    model.HRU_heat = Constraint(model.time, rule=HRU_convert)
    
    #AC Constraints:
    def AC_convert(model,i):
        return C_ac[i] == n_ac*H_ac[i]
    model.AC_convert = Constraint(model.time, rule=AC_convert)

    #Heat Pump Constraints:
    def HP_convert_1(model,i):
        return P_hp_H[i] == H_hp[i]/COP_hp
    model.HP_convert_1 = Constraint(model.time, rule=HP_convert_1)

    def HP_convert_2(model,i):
        return P_hp_C[i] == C_hp[i]/COP_hp
    model.HP_convert_2 = Constraint(model.time, rule=HP_convert_2)

    def HP_operation(model,i):
        return bin_HP_C[i]+bin_HP_H[i]<=1
    model.HP_operation = Constraint(model.time, rule=HP_operation)

    def HP_heating(model,i):
        return model.H_hp[i] <= model.bin_HP_H[i]*H_hp_max
    model.HP_heating = Constraint(model.time, rule=HP_heating)

    def HP_cooling(model,i):
        return model.C_hp[i] <= model.bin_HP_C[i]*C_hp_max
    model.HP_cooling = Constraint(model.time, rule=HP_cooling)

    #Micro Turbine Constraints:
    def MT_limit_upper(model,i):
        return P_mt[i] <= bin_P_mt[i]*P_mt_max
    model.MT_limit_upper = Constraint(model.time, rule=MT_limit_upper)
    def MT_limit_lower(model,i):
        return P_mt[i] >= bin_P_mt[i]*P_mt_min
    model.MT_limit_lower = Constraint(model.time, rule=MT_limit_lower)

    #Energy Balance Constraints:
    def elec_balance(model,i):
        return e_load[i] + P_CAES_ch[i] + P_hp_C[i] + P_hp_H[i] +P_grid_sell[i] == (wind_data[i] + PV_data[i] + P_grid_buy[i] + P_mt[i] +  P_CAES_dch[i])
    model.elec_balance = pyo.Constraint(model.time, rule = elec_balance)

    def heat_balance(model,i):
        return H_hp[i] + H_gb[i] + H_hru[i] + heat_caes[i] == h_load[i] +H_ac[i]
    model.heat_balance = pyo.Constraint(model.time, rule = heat_balance)


    def cold_balance(model,i):
        return C_ac[i]+ C_hp[i] + cold_caes[i] == c_load[i]
    model.cold_balance = pyo.Constraint(model.time, rule = cold_balance)


    #Objective Function : 
    def objective_function(model):
        return sum(P_grid_buy[i]*(buy_price[i])- (P_grid_sell[i] * sell_price[i]) +
                   (gas_price) * (P_mt[i] /(n_mt) + H_gb[i]/n_gb) for i in model.time)
    model.objective_function = pyo.Objective(rule = objective_function, sense=pyo.minimize)

    #Solver:

    opt = SolverFactory('gurobi')
    results = opt.solve(model,tee=True)
    result = results.Problem._list[0].lower_bound

    #Reading Results
    df = pd.DataFrame()
    for v in model.component_objects(pyo.Var, active=True):
        if v == Pressure_CAES:
            Pressure_values = [value(v[key]) for key in v]
            df[str(v)] = Pressure_values[0:24]
            pass

        else:
            optimal_values = [value(v[key]) for key in v]
            df[str(v)]=optimal_values

    grid_buy=df["P_grid_buy"]
    grid_sell=df["P_grid_sell"]
    grid = []
    charge_caes = df["P_CAES_ch"]
    discharge_caes = df["P_CAES_dch"]
    CAES = []
    for i in range(24):
        if grid_buy[i]==0:
            grid.append(grid_sell[i]*-1)
        else:
            grid.append(grid_buy[i])
        if round(discharge_caes[i])==0:
            CAES.append(charge_caes[i]*-1)
        else:
            CAES.append(discharge_caes[i])


    df["Grid"] = grid
    df["CAES"] = CAES
    df["P_hp"] = df["P_hp_C"]* -1+ df["P_hp_H"]
    df["Wind Power"] = wind_data
    df["PV Power"] = PV_data
    df["Electricity"] = e_load
    df["Heating"] = h_load
    df["Cooling"] = c_load
    df["Temperature"] = temp

    df.drop(axis=1, columns=['P_grid_buy', 'P_grid_sell', 'bin_grid_buy',
           'bin_grid_sell',
           'P_CAES_ch', 'P_CAES_dch','bin_CAES_ch', 'bin_CAES_dch',
           ],inplace=True)
    
    df["timestep"] = np.arange(0,24,1)
    df["Day"] = 24*[a]
    df_optimal = pd.concat([df_optimal, df])
    
    days_pd.append(a)
    operation_costs.append(result)

#Converting the cooling and heating energy of AA-CAES to action (based on maximum heating and cooling)
cold_ratio = []
for i in range(len(df_optimal["cold_caes"])):
    if df_optimal["maximum_cold_caes"].values[i] == 0:
        cold_ratio.append(0)
    else:
        cold_ratio.append(df_optimal["cold_caes"].values[i]/df_optimal["maximum_cold_caes"].values[i])

heat_ratio = []
for i in range(len(df_optimal["heat_caes"])):
    if df_optimal["maximum_heat_caes"].values[i] == 0:
        heat_ratio.append(0)
    else:
        heat_ratio.append(df_optimal["heat_caes"].values[i]/df_optimal["maximum_heat_caes"].values[i])

heat_cold_ratio = np.array(cold_ratio)+np.array(heat_ratio)
df_optimal["caes_heat_cool"] = heat_cold_ratio